let referenceToOldestKey = ‘’;if (!referenceToOldestKey) { // if initial fetch
 
  firebase.database().ref(‘items’)
   .orderByKey()
   .limitToLast(5)
   .once(‘value’)
   .then((snapshot) => {       // changing to reverse chronological order (latest first)
      let arrayOfKeys = Object.keys(snapshot.val())
         .sort()
         .reverse();      // transforming to array
      let results = arrayOfKeys
         .map((key) => snapshot.val()[key]);      // storing reference
      referenceToOldestKey = arrayOfKeys[arrayOfKeys.length-1];
 
      // Do what you want to do with the data, i.e.
      // append to page or dispatch({ … }) if using redux   })
   .catch((error) => { … } );
 
 } else {
 
  firebase.database().ref(‘items’)
   .orderByKey()
   .endAt(oldestKeyReference)
   .limitToLast(6)
   .once(‘value’)
   .then((snapshot) => {     // changing to reverse chronological order (latest first)
     // & removing duplicate
     let arrayOfKeys = Object.keys(snapshot.val())
         .sort()
         .reverse()
         .slice(1);      // transforming to array
      let results = arrayOfKeys
         .map((key) => snapshot.val()[key]);      // updating reference
      referenceToOldestKey = arrayOfKeys[arrayOfKeys.length-1];      // Do what you want to do with the data, i.e.
      // append to page or dispatch({ … }) if using redux   })
   .catch((error) => { … } );
 
 }